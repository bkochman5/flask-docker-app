# k8s-manifest.yml

# --- Part 1: A "request" for storage ---
# This asks K8s for a piece of disk
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc # Name of our storage request
spec:
  accessModes:
    - ReadWriteOnce # Can be used by one node at a time
  resources:
    requests:
      storage: 1Gi 
---
# --- Part 2: The Redis Database Deployment (MODIFIED) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: redis-db
        image: "redis:alpine"
        ports:
        - containerPort: 6379
        # --- NEW SECTION: Mount the storage ---
        volumeMounts:
        - mountPath: /data # Mount the disk inside the container at /data
          name: redis-storage
      # --- NEW SECTION: Define the volume to use ---
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-data-pvc # Use the PVC we defined above
---
# --- Part 3: The Redis Database Service ---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: ClusterIP
  selector:
    app: db
  ports:
  - port: 6379
    targetPort: 6379
---
# --- Part 4 & 5: Web App Deployment & Service  ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: flask-web
        image: bkochman5/flask-docker-app:v2 
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: NodePort 
  selector:
    app: web
  ports:
  - port: 80
    targetPort: 5000
    nodePort: 30007